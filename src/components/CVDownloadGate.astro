---
// CV Download Gate Component
---

<div id="cvDownloadGate" class="w-full max-w-lg mx-auto">
  <div class="glass p-8 rounded-xl">
    <div class="text-center mb-6">
      <div class="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
      </div>
      <h3 class="text-2xl font-bold mb-2">Download My CV</h3>
      <p class="text-gray-400">Please provide your details to download my full CV</p>
    </div>
    
    <form id="cvDownloadForm" class="space-y-4">
      <div>
        <label for="cvName" class="block text-sm font-medium mb-2">Full Name *</label>
        <input
          type="text"
          id="cvName"
          name="name"
          required
          class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/20 transition-all"
          placeholder="John Doe"
        />
      </div>
      
      <div>
        <label for="cvEmail" class="block text-sm font-medium mb-2">Email Address *</label>
        <input
          type="email"
          id="cvEmail"
          name="email"
          required
          class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/20 transition-all"
          placeholder="john.doe@company.com"
        />
      </div>
      
      <div>
        <label for="cvCompany" class="block text-sm font-medium mb-2">Company *</label>
        <input
          type="text"
          id="cvCompany"
          name="company"
          required
          class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/20 transition-all"
          placeholder="Acme Corp"
        />
      </div>
      
      <div>
        <label for="cvRole" class="block text-sm font-medium mb-2">Your Role</label>
        <input
          type="text"
          id="cvRole"
          name="role"
          class="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg focus:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500/20 transition-all"
          placeholder="CTO, Hiring Manager, etc."
        />
      </div>
      
      <div class="flex items-center">
        <input
          type="checkbox"
          id="cvSubscribe"
          name="subscribe"
          class="w-4 h-4 text-purple-600 bg-gray-800 border-gray-600 rounded focus:ring-purple-500"
        />
        <label for="cvSubscribe" class="ml-2 text-sm text-gray-400">
          Send me updates about your availability
        </label>
      </div>
      
      <button
        type="submit"
        class="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 py-3 rounded-lg font-semibold transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
        </svg>
        Download CV
      </button>
    </form>
  </div>
</div>

<!-- Modal Backdrop -->
<div id="cvModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
  <div class="relative">
    <button id="closeModal" class="absolute -top-12 right-0 text-white hover:text-gray-300">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    <div id="cvModalContent"></div>
  </div>
</div>

<script>
  const cvForm = document.getElementById('cvDownloadForm') as HTMLFormElement;
  const modal = document.getElementById('cvModal');
  const modalContent = document.getElementById('cvModalContent');
  const closeModalBtn = document.getElementById('closeModal');
  
  // Function to trigger CV download
  function downloadCV() {
    // Create a temporary link element
    const link = document.createElement('a');
    link.href = '/cv-russell-chalmers.pdf'; // Your CV file path
    link.download = 'Russell_Chalmers_CV.pdf';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
  
  // Show modal with CV form
  function showCVModal() {
    if (modal && modalContent) {
      modal.classList.remove('hidden');
      modalContent.innerHTML = document.getElementById('cvDownloadGate')?.innerHTML || '';
      
      // Re-attach form handler for the modal form
      const modalForm = modalContent.querySelector('#cvDownloadForm') as HTMLFormElement;
      if (modalForm) {
        modalForm.addEventListener('submit', handleCVFormSubmit);
      }
    }
  }
  
  // Handle form submission
  async function handleCVFormSubmit(e: Event) {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="loading">Preparing download...</span>';
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    
    try {
      // Store CV download request
      console.log('CV download request:', { ...data, timestamp: new Date().toISOString() });
      
      // Store in localStorage (replace with actual backend)
      const downloads = JSON.parse(localStorage.getItem('cvDownloads') || '[]');
      downloads.push({ ...data, timestamp: new Date().toISOString() });
      localStorage.setItem('cvDownloads', JSON.stringify(downloads));
      
      // Simulate processing
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Trigger download
      downloadCV();
      
      // Show success message
      if (modalContent) {
        modalContent.innerHTML = `
          <div class="glass p-8 rounded-xl text-center">
            <div class="text-5xl mb-4">âœ…</div>
            <h3 class="text-2xl font-bold mb-2 gradient-text">CV Downloaded!</h3>
            <p class="text-gray-300 mb-4">Thank you for your interest. The download should start automatically.</p>
            <p class="text-sm text-gray-400">I'll be in touch if there's a good fit!</p>
          </div>
        `;
      }
      
      // Close modal after 3 seconds
      setTimeout(() => {
        modal?.classList.add('hidden');
      }, 3000);
      
    } catch (error) {
      console.error('Error processing CV download:', error);
      submitButton.disabled = false;
      submitButton.innerHTML = 'Download CV';
      alert('There was an error processing your request. Please try again.');
    }
  }
  
  // Attach handlers
  cvForm?.addEventListener('submit', handleCVFormSubmit);
  
  closeModalBtn?.addEventListener('click', () => {
    modal?.classList.add('hidden');
  });
  
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
    }
  });
  
  // Export function for use in other components
  (window as any).showCVDownloadModal = showCVModal;
</script>

<style>
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  
  .loading {
    animation: pulse 1.5s infinite;
  }
</style>